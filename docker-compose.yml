# Docker Compose for MedSAS Platform

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: medsas-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: medsas
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_MULTIPLE_DATABASES: medsas_identity,medsas_tenant,medsas_billing,medsas_notification,medsas_reporting
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/docker/postgres/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
    networks:
      - medsas-network
    profiles: ["core", "full", "db"]

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: medsas-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis123
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - medsas-network
    profiles: ["core", "full", "cache"]

  # NATS Message Broker
  nats:
    image: nats:2.10-alpine
    container_name: medsas-nats
    restart: unless-stopped
    command: ["-js", "-m", "8222"]
    ports:
      - "4222:4222"
      - "8222:8222"
    networks:
      - medsas-network
    profiles: ["messaging", "full"]

  # Kafka (Alternative to NATS)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: medsas-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - medsas-network
    profiles: ["kafka", "messaging-kafka"]

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: medsas-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_HOST://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - medsas-network
    profiles: ["kafka", "messaging-kafka"]

  # MinIO S3-Compatible Storage
  minio:
    image: minio/minio:latest
    container_name: medsas-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - medsas-network
    profiles: ["storage", "full"]

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: medsas-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/docker/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    networks:
      - medsas-network
    profiles: ["monitoring", "full"]

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: medsas-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3003:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/docker/grafana:/etc/grafana/provisioning
    networks:
      - medsas-network
    profiles: ["monitoring", "full"]

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: medsas-jaeger
    restart: unless-stopped
    environment:
      COLLECTOR_OTLP_ENABLED: true
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "6831:6831/udp"
    networks:
      - medsas-network
    profiles: ["tracing", "monitoring", "full"]

  # Elasticsearch (for logging)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: medsas-elasticsearch
    restart: unless-stopped
    environment:
      - node.name=medsas-es
      - cluster.name=medsas-cluster
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - medsas-network
    profiles: ["logging", "full"]

  # Kibana (Elasticsearch UI)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: medsas-kibana
    restart: unless-stopped
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - medsas-network
    profiles: ["logging", "full"]

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: medsas-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/docker/nginx/conf.d:/etc/nginx/conf.d
      - nginx_logs:/var/log/nginx
    depends_on:
      - postgres
      - redis
    networks:
      - medsas-network
    profiles: ["proxy", "full"]

volumes:
  postgres_data:
  redis_data:
  minio_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
  nginx_logs:

networks:
  medsas-network:
    driver: bridge