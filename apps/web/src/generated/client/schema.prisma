generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String              @id @default(cuid())
  email               String              @unique
  passwordHash        String              @map("password_hash")
  firstName           String              @map("first_name")
  lastName            String              @map("last_name")
  phone               String?
  avatar              String?
  role                String              @default("USER")
  status              String              @default("PENDING_VERIFICATION")
  emailVerifiedAt     DateTime?           @map("email_verified_at")
  lastLoginAt         DateTime?           @map("last_login_at")
  twoFactorEnabled    Boolean             @default(false) @map("two_factor_enabled")
  twoFactorSecret     String?             @map("two_factor_secret")
  failedLoginAttempts Int                 @default(0) @map("failed_login_attempts")
  lockedUntil         DateTime?           @map("locked_until")
  passwordChangedAt   DateTime?           @map("password_changed_at")
  trialStartDate      DateTime?           @map("trial_start_date")
  trialEndDate        DateTime?           @map("trial_end_date")
  extraTrialDays      Int                 @default(0) @map("extra_trial_days")
  preferences         String              @default("{}")
  profile             String              @default("{}")
  createdAt           DateTime            @default(now()) @map("created_at")
  updatedAt           DateTime            @updatedAt @map("updated_at")
  tenantId            String?             @map("tenant_id")
  passwordResets      PasswordReset[]
  sessions            Session[]
  verificationTokens  VerificationToken[]
  suspensions         Suspension[]        @relation("UserSuspensions")
  suspendedUsers      Suspension[]        @relation("SuspendedBy")
  appealReviews       Suspension[]        @relation("AppealReviewedBy")
  auditLogsPerformed  AuditLog[]          @relation("AuditLogPerformedBy")
  auditLogsTarget     AuditLog[]          @relation("AuditLogTarget")

  @@map("users")
}

model Session {
  id            String    @id @default(cuid())
  refreshToken  String    @unique @map("refresh_token")
  accessToken   String?   @map("access_token")
  userId        String    @map("user_id")
  ipAddress     String    @map("ip_address")
  userAgent     String    @map("user_agent")
  deviceId      String?   @map("device_id")
  isRevoked     Boolean   @default(false) @map("is_revoked")
  revokedAt     DateTime? @map("revoked_at")
  revokedReason String?   @map("revoked_reason")
  expiresAt     DateTime  @map("expires_at")
  lastUsedAt    DateTime  @default(now()) @map("last_used_at")
  createdAt     DateTime  @default(now()) @map("created_at")
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model PasswordReset {
  id        String    @id @default(cuid())
  userId    String    @map("user_id")
  token     String    @unique
  expiresAt DateTime  @map("expires_at")
  usedAt    DateTime? @map("used_at")
  createdAt DateTime  @default(now()) @map("created_at")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}

model VerificationToken {
  id        String    @id @default(cuid())
  userId    String    @map("user_id")
  token     String    @unique
  type      String
  data      String    @default("{}")
  expiresAt DateTime  @map("expires_at")
  usedAt    DateTime? @map("used_at")
  attempts  Int       @default(0)
  createdAt DateTime  @default(now()) @map("created_at")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verification_tokens")
}

model Suspension {
  id                 String    @id @default(cuid())
  userId             String    @map("user_id")
  suspendedById      String    @map("suspended_by_id")
  reason             String
  durationType       String    @map("duration_type") // TEMPORARY or PERMANENT
  durationDays       Int?      @map("duration_days")
  suspendedUntil     DateTime? @map("suspended_until")
  canAppeal          Boolean   @default(false) @map("can_appeal")
  appealDeadline     DateTime? @map("appeal_deadline")
  hasAppealed        Boolean   @default(false) @map("has_appealed")
  appealReason       String?   @map("appeal_reason")
  appealedAt         DateTime? @map("appealed_at")
  appealStatus       String?   @map("appeal_status") // PENDING, APPROVED, REJECTED
  appealReviewedAt   DateTime? @map("appeal_reviewed_at")
  appealReviewedById String?   @map("appeal_reviewed_by_id")
  isActive           Boolean   @default(true) @map("is_active")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  user             User  @relation("UserSuspensions", fields: [userId], references: [id], onDelete: Cascade)
  suspendedBy      User  @relation("SuspendedBy", fields: [suspendedById], references: [id])
  appealReviewedBy User? @relation("AppealReviewedBy", fields: [appealReviewedById], references: [id])

  @@map("suspensions")
}

model AuditLog {
  id            String   @id @default(cuid())
  action        String
  performedById String?  @map("performed_by_id")
  targetUserId  String?  @map("target_user_id")
  details       String   @default("{}")
  ipAddress     String   @map("ip_address")
  userAgent     String   @map("user_agent")
  createdAt     DateTime @default(now()) @map("created_at")

  performedBy User? @relation("AuditLogPerformedBy", fields: [performedById], references: [id])
  targetUser  User? @relation("AuditLogTarget", fields: [targetUserId], references: [id])

  @@map("audit_logs")
}
